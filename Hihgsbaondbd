local Players = game:GetService("Players")
local UserInputService = game:GetService("UserInputService")
local RunService = game:GetService("RunService")
local TeleportService = game:GetService("TeleportService")
local TweenService = game:GetService("TweenService")

workspace.FallenPartsDestroyHeight = -math.huge

local Library
pcall(function()
    Library = loadstring(game:HttpGet("https://raw.githubusercontent.com/tbao143/Library-ui/refs/heads/main/Redzhubui"))()
end)

if not Library then
    game:GetService("StarterGui"):SetCore("SendNotification", {
        Title = "Erro",
        Text = "Falha ao carregar UI Library!",
        Duration = 5
    })
    return
end

local State = {
    player = Players.LocalPlayer,
    character = nil,
    humanoid = nil,
    rootPart = nil,
    farmActive = false,
    settings = {
        walkSpeed = 16,
        flySpeed = 0.5
    }
}

local function updateCharacter()
    State.character = State.player.Character or State.player.CharacterAdded:Wait()
    if State.character then
        State.humanoid = State.character:WaitForChild("Humanoid", 5)
        State.rootPart = State.character:WaitForChild("HumanoidRootPart", 5)
        if State.humanoid then
            State.humanoid.WalkSpeed = State.settings.walkSpeed
        end
    end
    return State.character and State.humanoid and State.rootPart
end

State.player.CharacterAdded:Connect(function()
    task.wait(1)
    updateCharacter()
end)

updateCharacter()

local Window = Library:MakeWindow({
    Title = "High Menu | Ilha Bela Roleplay",
    SubTitle = "by: drk.on",
    LoadText = "Carregando sistema...",
    Flags = "HighMenu_IlhaBela"
})

Window:AddMinimizeButton({
    Button = { Image = "rbxassetid://72285328408420", BackgroundTransparency = 0 },
    Corner = { CornerRadius = UDim.new(0, 35) },
})

local InfoTab = Window:MakeTab({ Title = "Info", Icon = "rbxassetid://77991697673856" })
InfoTab:AddSection({ "Informações do Sistema" })
InfoTab:AddParagraph({ "Versão:", "Beta" })
InfoTab:AddParagraph({ "Jogo:", "Ilha Bela Roleplay" })
InfoTab:AddParagraph({ "Status:", "Sistema Otimizado" })

InfoTab:AddButton({
    Name = "Reconectar ao Servidor",
    Callback = function()
        TeleportService:TeleportToPlaceInstance(game.PlaceId, game.JobId, State.player)
    end
})

InfoTab:AddButton({
    Name = "Buscar Novo Servidor",
    Callback = function()
        TeleportService:Teleport(game.PlaceId, State.player)
    end
})

local MovementTab = Window:MakeTab({ Title = "Movement", Icon = "rbxassetid://112065172702553" })
MovementTab:AddSection({ "Controles de Movimento" })

MovementTab:AddSlider({
    Name = "Velocidade Caminhada",
    Min = 16,
    Max = 150,
    Default = 16,
    Callback = function(value)
        State.settings.walkSpeed = value
        updateCharacter()
        if State.humanoid then
            State.humanoid.WalkSpeed = value
        end
    end
})

local FarmTab = Window:MakeTab({ Title = "Farm", Icon = "rbxassetid://81812366414231" })
FarmTab:AddSection({ "Sistema de Farm Pote Automático" })

local function getPlantaPos(planta)
    if planta:IsA("Model") then
        return planta:GetPivot().Position
    elseif planta:IsA("BasePart") or planta:IsA("Part") then
        return planta.Position
    end
    return nil
end

local function getPlantasOrdenadas()
    local plantFolder = workspace:FindFirstChild("Construcoes") and workspace.Construcoes:FindFirstChild("Plantinha_Ilegal")
    if not plantFolder then return {} end

    local fileiras, zAcum, BIN = {}, {}, 10
    for _, planta in ipairs(plantFolder:GetChildren()) do
        if (planta:IsA("Model") or planta:IsA("BasePart") or planta:IsA("Part")) and planta.Name ~= "Vendedor" then
            local pos = getPlantaPos(planta)
            if pos then
                local key = math.floor(pos.Z / BIN + 0.5)
                fileiras[key] = fileiras[key] or {}
                table.insert(fileiras[key], planta)
                zAcum[key] = (zAcum[key] or 0) + pos.Z
            end
        end
    end

    local keys = {}
    for k, list in pairs(fileiras) do
        zAcum[k] = zAcum[k] / #list
        table.insert(keys, k)
    end
    table.sort(keys, function(a, b) return zAcum[a] < zAcum[b] end)

    local ordenadas = {}
    for _, k in ipairs(keys) do
        table.sort(fileiras[k], function(a, b)
            local ax, bx = getPlantaPos(a).X, getPlantaPos(b).X
            return ax < bx
        end)
        for _, p in ipairs(fileiras[k]) do
            table.insert(ordenadas, p)
        end
    end

    return ordenadas
end

local function farmPoteLoop()
    while State.farmActive do
        pcall(function()
            local plantas = getPlantasOrdenadas()
            for _, planta in ipairs(plantas) do
                if not State.farmActive then break end
                local prompt = planta:FindFirstChildWhichIsA("ProximityPrompt", true)
                local pos = getPlantaPos(planta)
                if prompt and prompt.Enabled and State.rootPart and pos then
                    local targetPos = pos + Vector3.new(0, 7, 0)
                    local tween = TweenService:Create(
                        State.rootPart,
                        TweenInfo.new(State.settings.flySpeed, Enum.EasingStyle.Linear),
                        { CFrame = CFrame.new(targetPos) }
                    )
                    tween:Play()
                    tween.Completed:Wait()
                    fireproximityprompt(prompt)
                    task.wait(6)
                end
            end
        end)
        task.wait(1)
    end
end

local originalHipHeight

FarmTab:AddToggle({
    Name = "Farm Pote",
    Default = false,
    Callback = function(state)
        State.farmActive = state
        if state then
            if State.humanoid then
                originalHipHeight = State.humanoid.HipHeight
                pcall(function()
                    State.humanoid.HipHeight = (originalHipHeight or 2) + 2
                end)
            end
            task.spawn(farmPoteLoop)
        else
            if State.humanoid and originalHipHeight ~= nil then
                pcall(function()
                    State.humanoid.HipHeight = originalHipHeight
                end)
            end
        end
    end
})
